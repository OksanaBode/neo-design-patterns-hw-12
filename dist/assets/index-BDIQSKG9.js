var d=Object.defineProperty;var u=(c,e,t)=>e in c?d(c,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):c[e]=t;var a=(c,e,t)=>u(c,typeof e!="symbol"?e+"":e,t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))s(r);new MutationObserver(r=>{for(const n of r)if(n.type==="childList")for(const o of n.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&s(o)}).observe(document,{childList:!0,subtree:!0});function t(r){const n={};return r.integrity&&(n.integrity=r.integrity),r.referrerPolicy&&(n.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?n.credentials="include":r.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function s(r){if(r.ep)return;r.ep=!0;const n=t(r);fetch(r.href,n)}})();class p{constructor(e){this.raw=e}import(){this.validate();const e=this.map();this.render(e)}}class h{constructor(e){this.d=e}render(){const e=document.createElement("header");return e.className="section header",e.innerHTML=`
            <h1>${this.d.fullName}</h1>
            <p class="title">${this.d.title}</p>
            <div class="contacts">
              <p><a href="mailto:${this.d.contacts.email}">${this.d.contacts.email}</a></p>
              <p>${this.d.contacts.phone}</p>
              <p>${this.d.contacts.location}</p>
            </div>
        `,e}}class m{constructor(e){this.d=e}render(){const e=document.createElement("section");return e.className="section summary",e.innerHTML=`
            <h2>Summary</h2>
            <p>${this.d.text}</p>
        `,e}}class f{constructor(e){this.d=e}render(){const e=document.createElement("li");return e.className="project-item",e.innerHTML=`
            <p class="project">${this.d.name} - ${this.d.description}</p>
        `,e}}class w{constructor(e){a(this,"wrapped");this.wrapped=e}render(){const e=this.wrapped.render();return e.classList.add("highlight"),e}}class y{constructor(e){this.d=e}render(){const e=document.createElement("section");return e.className="section experience",e.innerHTML="<h2>Experience</h2>",this.d.forEach(t=>{const s=document.createElement("div"),r=`
                <p>
                  <span class="position">${t.position}</span> at <span class="company">${t.company}</span> (${t.start} - ${t.end})
                </p>
            `;s.innerHTML+=r;const n=document.createElement("ul");t.projects.forEach(o=>{let i=new f(o);o.isRecent&&(i=new w(i)),n.appendChild(i.render())}),s.appendChild(n),e.appendChild(s)}),e}}class E{constructor(e){this.d=e}render(){const e=document.createElement("section");return e.className="section education",e.innerHTML="<h2>Education</h2>",this.d.forEach(t=>{const s=document.createElement("div");s.innerHTML=`
                <p>${t.degree} ${t.field}, ${t.institution} (${t.graduation})</p>
            `,e.appendChild(s)}),e}}class k{constructor(e){this.d=e}render(){const e=document.createElement("section");e.className="section skills",e.innerHTML="<h2>Skills</h2>";const t=document.createElement("ul");for(const[s,r]of Object.entries(this.d)){const n=r;if(n&&n.length>0){const o=document.createElement("li");o.innerHTML=`<p class="category-item"><span class="category">${s}:</span> ${n.join(", ")}</p>`,t.appendChild(o)}}return e.appendChild(t),e}}class g{createBlock(e,t){switch(e){case"header":return new h(t.header);case"summary":return new m(t.summary);case"experience":return new y(t.experience);case"education":return new E(t.education);case"skills":return new k(t.skills);default:throw new Error(`Unknown block type: ${e}`)}}}class $ extends p{constructor(e){super(e),this.jsonData=e}validate(){if(!this.raw)throw new Error("Validation Error: No raw data provided.");const e=this.raw;if(!e.header||!e.summary||!e.experience||!e.education||!e.skills)throw new Error("Validation Error: Missing essential resume sections (header, summary, experience, education, skills).");console.log("Resume data validated successfully.")}map(){return this.raw}render(e){const t=document.getElementById("resume-content");if(!t){console.error('Error: Element with id "resume-content" not found in the DOM.');return}t.innerHTML="";const s=new g,r=s.createBlock("header",e);t.appendChild(r.render());const n=s.createBlock("summary",e);t.appendChild(n.render());const o=s.createBlock("experience",e);t.appendChild(o.render());const i=s.createBlock("education",e);t.appendChild(i.render());const l=s.createBlock("skills",e);t.appendChild(l.render()),console.log("Resume rendering complete.")}}class B{async init(e){try{const t=await this.fetchData(e);new $(t).import()}catch(t){console.error("Error initializing resume:",t)}}async fetchData(e){try{const t=await fetch(e);if(!t.ok)throw new Error(`Error loading JSON: ${t.statusText} (${t.status})`);return await t.json()}catch(t){throw console.error(`Error retrieving data from ${e}:`,t),t}}}new B().init("/resume.json");
